// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO "Account"("plaidId",
                      "plaidItemId",
                      "name",
                      "officialName",
                      "subtype",
                      "type",
                      "mask",
                      "availableBalance",
                      "currentBalance",
                      "isoCurrencyCode")
VALUES (?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?)
ON CONFLICT(plaidId) DO UPDATE SET plaidId=excluded."plaidId",
                                   "plaidItemId"=excluded."plaidItemId",
                                   "name"=excluded."name",
                                   "officialName"=excluded."officialName",
                                   "subtype"=excluded."subtype",
                                   "type"=excluded."type",
                                   "mask"=excluded."mask",
                                   "availableBalance"=excluded."availableBalance",
                                   "currentBalance"=excluded."currentBalance",
                                   "isoCurrencyCode"=excluded."isoCurrencyCode"
`

type CreateAccountParams struct {
	PlaidId          string
	PlaidItemId      string
	Name             string
	OfficialName     string
	Subtype          string
	Type             string
	Mask             string
	AvailableBalance sql.NullFloat64
	CurrentBalance   sql.NullFloat64
	IsoCurrencyCode  string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.PlaidId,
		arg.PlaidItemId,
		arg.Name,
		arg.OfficialName,
		arg.Subtype,
		arg.Type,
		arg.Mask,
		arg.AvailableBalance,
		arg.CurrentBalance,
		arg.IsoCurrencyCode,
	)
	return err
}

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO "Transaction"("plaidId",
                          "plaidAccountId",
                          "date",
                          "name",
                          "amount",
                          "category",
                          "checkNumber",
                          "categoryIconUrl",
                          "logoUrl",
                          "paymentChannel",
                          "merchantName",
                          "address",
                          "city",
                          "state",
                          "lat",
                          "lon",
                          "postalCode")
VALUES (?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?)
ON CONFLICT(plaidId) DO UPDATE SET plaidId=excluded."plaidId",
                                   "plaidAccountId"=excluded."plaidAccountId",
                                   "date"=excluded."date",
                                   "name"=excluded."name",
                                   "amount"=excluded."amount",
                                   "category"=excluded."category",
                                   "checkNumber"=excluded."checkNumber",
                                   "categoryIconUrl"=excluded."categoryIconUrl",
                                   "logoUrl"=excluded."logoUrl",
                                   "paymentChannel"=excluded."paymentChannel",
                                   "merchantName"=excluded."merchantName",
                                   "address"=excluded."address",
                                   "city"=excluded."city",
                                   "state"=excluded."state",
                                   "lat"=excluded."lat",
                                   "lon"=excluded."lon",
                                   "postalCode"=excluded."postalCode"
`

type CreateTransactionParams struct {
	PlaidId         string
	PlaidAccountId  string
	Date            string
	Name            string
	Amount          float64
	Category        string
	CheckNumber     string
	CategoryIconUrl string
	LogoUrl         string
	PaymentChannel  string
	MerchantName    string
	Address         string
	City            string
	State           string
	Lat             sql.NullFloat64
	Lon             sql.NullFloat64
	PostalCode      string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.PlaidId,
		arg.PlaidAccountId,
		arg.Date,
		arg.Name,
		arg.Amount,
		arg.Category,
		arg.CheckNumber,
		arg.CategoryIconUrl,
		arg.LogoUrl,
		arg.PaymentChannel,
		arg.MerchantName,
		arg.Address,
		arg.City,
		arg.State,
		arg.Lat,
		arg.Lon,
		arg.PostalCode,
	)
	return err
}
